# boilerplate
apiVersion: camel.apache.org/v1
kind: Integration
spec:
  dependencies:
  - github:cloudevents/sdk-java/f42020333a8ecfa6353fec26e4b9d6eceb97e626
  sources:
  - name: InputConfiguration.java
    content: |
      import org.apache.camel.BindToRegistry;
      import org.apache.camel.Exchange;
      import org.apache.camel.Processor;
      import org.slf4j.Logger;
      import org.slf4j.LoggerFactory;

      import io.cloudevents.CloudEvent;
      import io.cloudevents.core.builder.CloudEventBuilder;
      import io.cloudevents.core.format.EventFormat;
      import io.cloudevents.core.provider.EventFormatProvider;

      import java.net.URI;

      class TransformMessageToCloudEvent implements Processor {
          private static final Logger LOG = LoggerFactory.getLogger(TransformMessageToCloudEvent.class);

          public void process(Exchange exchange) throws Exception {
              String body = exchange.getIn().getBody(String.class);
              LOG.info("Received message from console with body: {}", body);

              // Create a Cloud Event:
              CloudEvent event = CloudEventBuilder.v1()
                      .withId(exchange.getExchangeId())
                      .withType(exchange.getProperty("cloudevent.type", String.class))
                      .withSource(URI.create(exchange.getProperty("cloudevent.source", String.class)))
                      .withData("text/plain", body.getBytes())
                      .build();
              LOG.info("User generated message packaged as CloudEvent: {}", event.toString());

              // Serialize event.
              EventFormat format = EventFormatProvider.getInstance().resolveFormat("application/cloudevents+json");
              String eventAsString = new String(format.serialize(event));

              // Set Exchange body to CloudEvent and send it along.
              exchange.getIn().setBody(eventAsString);
          }
      }

      public class InputConfiguration {
          @BindToRegistry
          public TransformMessageToCloudEvent transformMessageToCloudEvent() {
              return new TransformMessageToCloudEvent();
          }
      }
  configuration:
  - type: property
    value: camel.component.kafka.brokers=kar-kafka-0.kar-system:9092

# variable spec
  flows:
  - from:
      uri: timer:tick
      parameters:
        period: "3000"
      steps:
      - to: http://financialmodelingprep.com/api/v3/quote-short/AAPL?apikey=demo
      - set-property:
          constant: mysource
          name: cloudevent.source
      - set-property:
          constant: quote
          name: cloudevent.type
      - process:
          ref: transformMessageToCloudEvent
      - to: kafka:InputStockEvent
      - log:
          message: ${body}
metadata:
  name: source
