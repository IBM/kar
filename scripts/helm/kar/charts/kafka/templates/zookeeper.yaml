#
# Copyright IBM Corporation 2020,2022
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: v1
kind: Service
metadata:
  name: kar-zookeeper
  labels:
    {{- include "kar.labels" . | nindent 4 }}
    name: kar-zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  selector:
      {{- include "kar.selectorLabels" . | nindent 6 }}
      name: kar-zookeeper
  ports:
  - name: zookeeper
    port: {{ .Values.zk.port }}
    targetPort: {{ .Values.zk.port }}
  - name: server
    port: {{ .Values.zk.serverPort }}
    targetPort: {{ .Values.zk.serverPort }}
  - name: leader-election
    port: {{ .Values.zk.leaderElectionPort }}
    targetPort: {{ .Values.zk.leaderElectionPort }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kar-zookeeper
  labels:
    {{- include "kar.labels" . | nindent 4 }}
    name: kar-zookeeper
spec:
  podManagementPolicy: "Parallel"
{{- if .Values.global.replicatedServices }}
  replicas: 3
{{ else }}
  replicas: 1
{{- end }}
  selector:
    matchLabels:
      {{- include "kar.selectorLabels" . | nindent 6 }}
      name: kar-zookeeper
  serviceName: kar-zookeeper
  template:
    metadata:
      labels:
        {{- include "kar.selectorLabels" . | nindent 8 }}
        name: kar-zookeeper
    spec:
{{- if .Values.global.openshift }}
      serviceAccountName: sa-with-anyuid
{{- end }}
{{- if .Values.global.affinity }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kar-type
                operator: In
                values:
                - system
{{- end }}
{{- if and (not .Values.global.replicatedServices) .Values.global.persistence }}
      volumes:
        - name: kar-zookeeper-pvc-data
          persistentVolumeClaim:
            claimName: kar-zookeeper-pvc-data
        - name: kar-zookeeper-pvc-datalog
          persistentVolumeClaim:
            claimName: kar-zookeeper-pvc-datalog
{{- end }}
      containers:
      - name: zk
        image: {{ .Values.zk.imageRegistry }}/{{ .Values.zk.imageName }}:{{ .Values.zk.imageTag }}
        command: ["/bin/bash", "-c", "hostname -s | awk -F '-' '{print $NF}'> /data/myid; cat /data/myid; /docker-entrypoint.sh zkServer.sh start-foreground"]
{{- if .Values.global.persistence }}
        volumeMounts:
        - mountPath: /data
          name: kar-zookeeper-pvc-data
        - mountPath: /datalog
          name: kar-zookeeper-pvc-datalog
{{- end }}
        ports:
        - name: zookeeper
          containerPort: {{ .Values.zk.port }}
        - name: server
          containerPort: {{ .Values.zk.serverPort }}
        - name: leader-election
          containerPort: {{ .Values.zk.leaderElectionPort }}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.zk.port }}
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - "echo ruok | nc -w 1 localhost {{ .Values.zk.port }} | grep imok"
        env:
        - name: ZOO_4LW_COMMANDS_WHITELIST
          value: "srvr,ruok"
        - name: ZOO_SERVERS
{{- if .Values.global.replicatedServices }}
          value: "server.0={{ include "kar.zookeeper_host_zero" . }}:{{ .Values.zk.serverPort }}:{{ .Values.zk.leaderElectionPort }};{{ .Values.zk.port }} server.1={{ include "kar.zookeeper_host_one" . }}:{{ .Values.zk.serverPort }}:{{ .Values.zk.leaderElectionPort }};{{ .Values.zk.port }} server.2={{ include "kar.zookeeper_host_two" . }}:{{ .Values.zk.serverPort }}:{{ .Values.zk.leaderElectionPort }};{{ .Values.zk.port }}"
{{ else }}
          value: "server.0={{ include "kar.zookeeper_host_zero" . }}:{{ .Values.zk.serverPort }}:{{ .Values.zk.leaderElectionPort }};{{ .Values.zk.port }}"
{{- end }}

{{/* PVCs created by volumeClaimTemplates must be manually removed; only create them if we really need them */}}
{{- if and .Values.global.replicatedServices .Values.global.persistence }}
  volumeClaimTemplates:
  - metadata:
      name: kar-zookeeper-pvc-data
      labels:
        {{- include "kar.labels" . | nindent 8 }}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 256Mi
  - metadata:
      name: kar-zookeeper-pvc-datalog
      labels:
        {{- include "kar.labels" . | nindent 8 }}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 256Mi
{{- end }}

{{- if and (not .Values.global.replicatedServices) .Values.global.persistence }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kar-zookeeper-pvc-data
  labels:
    {{- include "kar.labels" . | nindent 4 }}
    name: kar-zookeeper-pvc-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 256Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kar-zookeeper-pvc-datalog
  labels:
    {{- include "kar.labels" . | nindent 4 }}
    name: kar-zookeeper-pvc-datalog
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 256Mi
{{- end }}
