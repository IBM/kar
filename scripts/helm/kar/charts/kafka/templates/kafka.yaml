#
# Copyright IBM Corporation 2020,2021
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: v1
kind: Service
metadata:
  name: kar-kafka
  labels:
    {{- include "kar.labels" . | nindent 4 }}
    name: kar-kafka
spec:
  type: ClusterIP
  clusterIP: None
  selector:
      {{- include "kar.selectorLabels" . | nindent 6 }}
      name: kar-kafka
  ports:
  - name: kafka-internal
    port: {{ .Values.kafka.portInternal }}
    targetPort: {{ .Values.kafka.portInternal }}
  - name: kafka-external
    port: {{ .Values.kafka.portExternal }}
    targetPort: {{ .Values.kafka.portExternal }}
---
apiVersion: v1
kind: Service
metadata:
  name: kar-kafka-0
  labels:
    {{- include "kar.labels" . | nindent 4 }}
    name: kar-kafka-0
spec:
  type: NodePort
  selector:
    statefulset.kubernetes.io/pod-name: kar-kafka-0
  ports:
  - name: kafka-internal
    port: {{ .Values.kafka.portInternal }}
    targetPort: {{ .Values.kafka.portInternal }}
  - name: kafka-external
    port: {{ .Values.kafka.portExternal }}
    targetPort: {{ .Values.kafka.portExternal }}
    nodePort: {{ .Values.global.kafkaNodePort }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kar-kafka
  labels:
    {{- include "kar.labels" . | nindent 4 }}
    name: kar-kafka
spec:
  podManagementPolicy: "Parallel"
{{- if .Values.global.replicatedServices }}
  replicas: 3
{{ else }}
  replicas: 1
{{- end }}
  selector:
    matchLabels:
      {{- include "kar.selectorLabels" . | nindent 6 }}
      name: kar-kafka
  serviceName: kar-kafka
  template:
    metadata:
      labels:
        {{- include "kar.selectorLabels" . | nindent 8 }}
        name: kar-kafka
    spec:
{{- if .Values.global.openshift }}
      serviceAccountName: sa-with-anyuid
{{- end }}
{{- if and (not .Values.global.replicatedServices) .Values.global.persistence }}
      volumes:
        - name: {{ .Release.Name }}-kafka-pvc
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-kafka-pvc
{{- end }}
      initContainers:
      - name: wait-for-zookeeper
        image: busybox
        command: ["sh", "-c", 'result=1; until [ $result -eq 0 ]; do OK=$(echo ruok | nc -w 1 {{ include "kar.zookeeper_host_zero" . }} {{ .Values.zk.port }}); if [ "$OK" == "imok" ]; then result=0; echo "zookeeper returned imok!"; else echo waiting for zookeeper to be ready; sleep 1; fi; done; echo "Success: zookeeper is up"']
      containers:
      - name: kafka
        image: {{ .Values.kafka.imageRegistry }}/{{ .Values.kafka.imageName }}:{{ .Values.kafka.imageTag }}
{{- if .Values.global.persistence }}
        volumeMounts:
        - mountPath: /kafka
          name: {{ .Release.Name }}-kafka-pvc
{{- end }}
        ports:
        - name: kafka-internal
          containerPort: {{ .Values.kafka.portInternal }}
        - name: kafka-external
          containerPort: {{ .Values.kafka.portExternal }}
        readinessProbe:
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 10
          exec:
            command:
            - /opt/kafka/bin/kafka-topics.sh
            - localhost:{{ .Values.kafka.portInternal }}
            - --version
        env:
        - name: HOSTNAME_COMMAND
          value: hostname -f
        - name: BROKER_ID_COMMAND
          value: "hostname | awk -F'-' '{print $NF}'"
{{- if .Values.global.replicatedServices }}
        # Exposing a replicated Kafka cluster requires complex ingress setup; leave as a future TODO
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: INCLUSTER:PLAINTEXT
        - name: KAFKA_LISTENERS
          value: INCLUSTER://:{{ .Values.kafka.portInternal }}
        - name: KAFKA_ADVERTISED_LISTENERS
          value: INCLUSTER://_{HOSTNAME_COMMAND}:{{ .Values.kafka.portInternal }}
{{ else }}
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: INCLUSTER:PLAINTEXT,EXTERNAL:PLAINTEXT
        - name: KAFKA_LISTENERS
          value: INCLUSTER://:{{ .Values.kafka.portInternal }},EXTERNAL://:{{ .Values.kafka.portExternal }}
        - name: KAFKA_ADVERTISED_LISTENERS
          value: INCLUSTER://_{HOSTNAME_COMMAND}:{{ .Values.kafka.portInternal }},EXTERNAL://{{ .Values.global.kafkaExternalHost }}:{{ .Values.global.kafkaNodePort }}
{{- end }}
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: INCLUSTER
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: {{ include "kar.zookeeper_host_zero" . }}:{{ .Values.zk.port }}
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "false"

{{/* PVCs created by volumeClaimTemplates must be manually removed; only create them if we really need them */}}
{{- if and .Values.global.replicatedServices .Values.global.persistence }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-kafka-pvc
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
{{- end }}

{{- if and (not .Values.global.replicatedServices) .Values.global.persistence }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-kafka-pvc
  labels:
    {{- include "kar.labels" . | nindent 4 }}
    name: {{ .Release.Name }}-kafka-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
{{- end }}
