basePath: /kar/v1
consumes:
- application/json
definitions:
  Actor:
    properties:
      ID:
        type: string
      Type:
        type: string
    title: Actor uniquely identifies an actor instance.
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
  Duration:
    description: |-
      A Duration represents the elapsed time between two instants
      as an int64 nanosecond count. The representation limits the
      largest representable duration to approximately 290 years.
    format: int64
    type: integer
    x-go-package: time
  Reminder:
    description: Reminder describes a time-triggered asynchronous invocation of a
      Path on an Actor
    properties:
      Actor:
        $ref: '#/definitions/Actor'
      deadline:
        format: date-time
        type: string
        x-go-name: Deadline
      encodedData:
        type: string
        x-go-name: EncodedData
      id:
        type: string
        x-go-name: ID
      path:
        type: string
        x-go-name: Path
      period:
        $ref: '#/definitions/Duration'
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
  reminderFilter:
    properties:
      id:
        description: An optional reminder ID
        type: string
        x-go-name: ID
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
  scheduleReminderPayload:
    description: ScheduleReminderPayload is the JSON request body for scheduling a
      new reminder
    properties:
      data:
        description: |-
          An optional parameter containing an arbitray JSON value that will be provided as the
          payload when the `path` is invoked on the actor instance.
        example: '{ msg: "Hello Friend!" }'
        type: object
        x-go-name: Data
      deadline:
        description: The time at which the reminder should first fire, specified as
          a string in an ISO-8601 compliant format
        format: date-time
        type: string
        x-go-name: Deadline
      id:
        description: The ID to use for this reminder
        example: repeatingGreeter
        type: string
        x-go-name: ID
      path:
        description: The path to invoke on the actor instance when the reminder is
          fired
        example: sayHello
        type: string
        x-go-name: Path
      period:
        description: |-
          The optional period parameter is a string encoding a GoLang Duration that is used to create a periodic reminder.
          If a period is provided, then the reminder will be fired repeatedly by adding the period to the last fire time
          to compute a new Deadline for the next invocation of the reminder.
        example: 30s
        type: string
        x-go-name: Period
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
info:
  description: |-
    This document describes the RESTful API provided by the
    Kubernetes Application Runtime (KAR) runtime to application
    processes.
  title: KAR
  version: v1
paths:
  /actor/{actorType}/{actorId}/call/{path}:
    post:
      description: |-
        ### Synchronously invoke an actor method

        Call synchronously executes a `POST` to the `path` endpoint of the
        actor instance indicated by `actorType` and `actorId`.
        The JSON request body is passed through to the target endpoint.
        The result of the call is the result of invoking the target actor method.
      operationId: idActorCall
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      - description: The target endpoint to be invoked by the operation
        in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      - description: Optionally specific the session to use when performing the call.  Enables
          re-entrancy for nested actor calls.
        in: query
        name: session
        type: string
        x-go-name: Session
      responses:
        "200":
          $ref: '#/responses/response200CallResult'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: call
      tags:
      - actors
  /actor/{actorType}/{actorId}/migrate:
    get:
      description: |-
        ### Initiate an actor migration

        This operation is primarily intended to be used by the KAR actor runtime.
        When delivered to the runtime currently hosting the designated actor instance,
        it causes the actor to be passivated and the binding of the actor instance to
        that runtime to be removed from the KAR actor placement service. When next
        activated, the actor instance may be hosted by a different instance of the
        application process.
      operationId: idActorMigrate
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      summary: migrate
      tags:
      - actors
  /actor/{actorType}/{actorId}/reminder:
    delete:
      description: |-
        ### Cancel all matching reminders

        This operation cancels reminders for the actor instance specified in the path.
        If a reminder id is provided in the request body, only the reminder whose id
        matches that id will be cancelled. If no id is provided, all
        of the specified actor's reminders will be cancelled.  The number of reminders
        actually cancelled is returned as the result of the operation.
      operationId: idActorReminderCancel
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      - description: |-
          The request body is an optional filter
          used to select a subset of an actor's reminders.
        in: body
        name: Body
        schema:
          $ref: '#/definitions/reminderFilter'
      responses:
        "200":
          $ref: '#/responses/response200ReminderCancelResult'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: reminder
      tags:
      - actors
    get:
      description: |-
        ### Get all matching reminders

        This operatation returns all reminders for the actor instance specified in the path.
        If a reminder id is provided in the request body, only a reminder that
        has that id will be returned.
      operationId: idActorReminderGet
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      - description: |-
          The request body is an optional filter
          used to select a subset of an actor's reminders.
        in: body
        name: Body
        schema:
          $ref: '#/definitions/reminderFilter'
      responses:
        "200":
          $ref: '#/responses/response200ReminderGetResult'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: reminder
      tags:
      - actors
    post:
      description: |-
        ### Schedule a reminder

        This operatation schedules a reminder for the actor instance specified in the path
        as described by the data provided in the request body.
        If there is already a reminder for the target actor instance with the same reminderId,
        that existing reminder's schedule will be updated based on the request body.
        The operation will not return until after the reminder is scheduled.
      operationId: idActorReminderSchedule
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      - description: The request body describes the reminder to be scheduled
        in: body
        name: Body
        schema:
          $ref: '#/definitions/scheduleReminderPayload'
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: reminder
      tags:
      - actors
  /actor/{actorType}/{actorId}/state:
    delete:
      description: |-
        ### Remove an actor's state

        The state of the actor instance indicated by `actorType` and `actorId`
        will be deleted.
      operationId: idActorStateDeleteAll
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      responses:
        "200":
          $ref: '#/responses/response200StateDeleteResult'
        "404":
          $ref: '#/responses/response404'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: state
      tags:
      - actors
    get:
      description: |-
        ### Get an actor's state

        The state of the actor instance indicated by `actorType` and `actorId`
        will be returned as the response body.
      operationId: idActorStateGetAll
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      responses:
        "200":
          $ref: '#/responses/response200StateGetAllResult'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: state
      tags:
      - actors
  /actor/{actorType}/{actorId}/state/{key}:
    delete:
      description: |-
        ### Remove a single entry in an actor's state

        The state of the actor instance indicated by `actorType` and `actorId`
        will be updated by removing the entry for `key`.
        The operation will not return until the state has been updated.
        The result of the operation is `1` if an entry was actually removed and
        `0` if there was no entry for `key`.
      operationId: idActorStateDelete
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      responses:
        "200":
          $ref: '#/responses/response200StateDeleteResult'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: state/key
      tags:
      - actors
    get:
      description: |-
        ### Get a single entry of an actor's state

        The `key` entry of the state of the actor instance indicated by `actorType` and `actorId`
        will be returned as the response body.
        If there is no entry in the actor instandce's state for `key` the operation will
        by default return a `200` status with a nil response body. If the boolean query parameter
        `errorOnAbsent` is set to `true`, the operation will instead return a `404` status if
        there is no entry for `key`.
      operationId: idActorStateGet
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      - description: Controls response when key is absent; if true an absent key will
          result in a `404` response, otherwise a `200` response with a nil value
          will be returned.
        in: query
        name: errorOnAbsent
        type: boolean
        x-go-name: ErrorOnAbsent
      responses:
        "200":
          $ref: '#/responses/response200StateGetResult'
        "404":
          $ref: '#/responses/response404'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: state/key
      tags:
      - actors
    post:
      description: |-
        ### Update a single entry of an actor's state

        The state of the actor instance indicated by `actorType` and `actorId`
        will be updated by setting `key` to contain the JSON request body.
        The operation will not return until the state has been updated.
        The result of the operation is `1` if a new entry was created and `0` if an existing entry was updated.
      operationId: idActorStateSet
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      responses:
        "200":
          $ref: '#/responses/response200StateSetResult'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: state/key
      tags:
      - actors
  /actor/{actorType}/{actorId}/tell/{path}:
    post:
      description: |-
        ### Asynchronosuly invoke an actor method

        Tell asynchronously executes a `POST` to the `path` endpoint of
        the actor instance indicated by `actorType` and `actorId`.
        The JSON request body is passed through to the target endpoint.
        A `200` response indicates that the request has been accepted by the
        runtime and will eventually be delivered to the targeted actor method.
      operationId: idActorTell
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      - description: The target endpoint to be invoked by the operation
        in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: tell
      tags:
      - actors
  /event/{topic}/publish:
    post:
      description: |-
        ### Publish an event to a topic

        The event provived as the request body will be published on `topic`.
        When the operation returns successfully, the event is guarenteed to
        eventually be published to the targeted topic.
      operationId: idEventPublish
      parameters:
      - description: The topic name
        in: path
        name: topic
        required: true
        type: string
        x-go-name: Topic
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: publish
      tags:
      - events
  /event/{topic}/subscribe:
    post:
      description: |-
        ### Subscribe to a topic

        Subscribe an application endpoint to be invoked when events are delivered to
        the targeted `topic`.  The endpoint is described in the request body and
        may be either a service endpoint or an actor method.
      operationId: idEventSubscribe
      parameters:
      - description: The topic name
        in: path
        name: topic
        required: true
        type: string
        x-go-name: Topic
      - description: The target endpoint to be invoked by the operation
        in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: subscribe
      tags:
      - events
  /event/{topic}/unsubscribe:
    post:
      description: |-
        ### Unsubscribe from a topic

        Unsubscribe an appliction endpoint described by the request body from `topic`.
        The operation may return before the unsubscription actually completes, but upon
        successful it is guarenteed that the endpoint will eventually stop receive
        events from the topic.
      operationId: idEventUnsubscribe
      parameters:
      - description: The topic name
        in: path
        name: topic
        required: true
        type: string
        x-go-name: Topic
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: unsubscribe
      tags:
      - events
  /service/{service}/call/{path}:
    post:
      description: |-
        ### Synchronously invoke a service endpoint

        Call synchronously executes a `POST` to the `path` endpoint of `service`.
        The JSON request body is passed through to the target endpoint.
        The result of the call is the result of invoking the target service endpoint.
      operationId: idServiceCall
      parameters:
      - description: The service name
        in: path
        name: service
        required: true
        type: string
        x-go-name: Service
      - description: The target endpoint to be invoked by the operation
        in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      responses:
        "200":
          $ref: '#/responses/response200CallResult'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: call
      tags:
      - services
  /service/{service}/tell/{path}:
    post:
      description: |-
        ### Asynchronously invoke a service endpoint

        Tell asynchronously executes a `POST` to the `path` endpoint of `service`.
        The JSON request body is passed through to the target endpoint.
        A `200` response indicates that the request has been accepted by the
        runtime and will eventually be delivered to the targeted service endpoint.
      operationId: idServiceTell
      parameters:
      - description: The service name
        in: path
        name: service
        required: true
        type: string
        x-go-name: Service
      - description: The target endpoint to be invoked by the operation
        in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: tell
      tags:
      - services
  /system/broadcast/{path}:
    post:
      description: |-
        ### Asynchronously broadcast a message to the KAR runtime

        Broadcast asynchronously executes a `POST` on the `path` endpoint
        of all other KAR runtimes that are currently part of the application.
        The runtime initiating the broadcast is not included as a receipient.
        A `200` response indicates that the request to send the broadcast
        has been accepted and the POST will eventually be delivered to all targeted
        runtime processes.
      operationId: idSystemBroadcast
      parameters:
      - description: The target endpoint to be invoked by the operation
        in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      summary: broadcast
      tags:
      - system
  /system/health:
    get:
      description: |-
        ### Health-check endpoint

        Returns a `200` response to indicate that the KAR runtime processes is healthy.
      operationId: isSystemHealth
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      summary: health
      tags:
      - system
  /system/kill:
    get:
      description: |-
        ### Shutdown a single KAR runtime

        Initiate an orderly shutdown of the target KAR runtime process.
      operationId: idSystemKill
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      summary: kill
      tags:
      - system
  /system/killall:
    get:
      description: |-
        ### Shutdown the KAR runtime mesh for an application

        Initiate an orderly shutdown of all KAR runtime processes.
      operationId: idSystemKillAll
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      summary: killall
      tags:
      - system
produces:
- application/json
responses:
  response200:
    description: A success message.
    headers:
      body:
        description: A success message
        example: OK
        type: string
  response200CallResult:
    description: The response body returned by the invoked endpoint
    headers:
      body:
        description: The response body returned by the invoked endpoint
    schema:
      type: object
  response200ReminderCancelResult:
    headers:
      NumberCancelled:
        description: The number of reminders that were actually cancelled
        example: 3
        format: int64
        type: integer
  response200ReminderGetResult:
    headers:
      Body:
        description: An array containing all matching reminders
        example: '[{ Actor: { Type: ''Foo'', ID: ''22'' }, id: ''ticker'', path: ''/echo'',
          deadline: ''2020-04-14T14:17:51.073Z'', period: 5000000000, encodedData:
          ''{"msg":"hello"}'' }, { Actor: { Type: ''Foo'', ID: ''22'' }, id: ''once'',
          path: ''/echo'', deadline: ''2020-04-14T14:20:00Z'', encodedData: ''{"msg":"carpe
          diem"}'' }]'
        items:
          $ref: '#/definitions/Reminder'
        type: array
  response200StateDeleteResult:
    headers:
      NumberDeleted:
        description: The number of key-value pairs that were deleted
        example: 3
        format: int64
        type: integer
  response200StateGetAllResult:
    headers:
      Response:
        description: A map containing the requested state
    schema:
      additionalProperties:
        type: object
      type: object
  response200StateGetResult:
    headers:
      Response:
        description: The requested value
    schema:
      type: object
  response200StateSetResult:
    headers:
      NumberCreated:
        description: Returns 0 if an existing entry was updated and 1 if a new entry
          was created
        format: int64
        type: integer
  response404:
    description: Response indicating requested resource is not found
    headers:
      body:
        description: Requested resource is not found
        example: Not Found
        type: string
  response500:
    description: A message describing the error
    headers:
      body:
        description: A message describing the error
        example: Internal Server Error
        type: string
  response503:
    description: A message describing the error
    headers:
      body:
        description: A message describing the error
        example: Service Unavailable
        type: string
schemes:
- http
swagger: "2.0"
