basePath: /kar/v1
consumes:
- application/json
definitions:
  Actor:
    properties:
      ID:
        type: string
      Type:
        type: string
    title: Actor uniquely identifies an actor instance.
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
  Duration:
    description: |-
      A Duration represents the elapsed time between two instants
      as an int64 nanosecond count. The representation limits the
      largest representable duration to approximately 290 years.
    format: int64
    type: integer
    x-go-package: time
  Reminder:
    description: Reminder describes a time-triggered asynchronous invocation of a
      Path on an Actor
    properties:
      Actor:
        $ref: '#/definitions/Actor'
      deadline:
        format: date-time
        type: string
        x-go-name: Deadline
      encodedData:
        type: string
        x-go-name: EncodedData
      id:
        type: string
        x-go-name: ID
      path:
        type: string
        x-go-name: Path
      period:
        $ref: '#/definitions/Duration'
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
  reminderFilter:
    properties:
      id:
        description: An optional reminder ID
        type: string
        x-go-name: ID
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
  scheduleReminderPayload:
    description: ScheduleReminderPayload is the JSON request body for scheduling a
      new reminder
    properties:
      data:
        description: |-
          An optional parameter containing an arbitray JSON value that will be provided as the
          payload when the `path` is invoked on the actor instance.
        example: '{ msg: "Hello Friend!" }'
        type: object
        x-go-name: Data
      deadline:
        description: The time at which the reminder should first fire, specified as
          a string in an ISO-8601 compliant format
        format: date-time
        type: string
        x-go-name: Deadline
      id:
        description: The ID to use for this reminder
        example: repeatingGreeter
        type: string
        x-go-name: ID
      path:
        description: The path to invoke on the actor instance when the reminder is
          fired
        example: sayHello
        type: string
        x-go-name: Path
      period:
        description: |-
          The optional period parameter is a string encoding a GoLang Duration that is used to create a periodic reminder.
          If a period is provided, then the reminder will be fired repeatedly by adding the period to the last fire time
          to compute a new Deadline for the next invocation of the reminder.
        example: 30s
        type: string
        x-go-name: Period
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
info:
  description: |-
    This document describes the RESTful API provided by the
    Kubernetes Application Runtime (KAR) runtime to application
    processes.
  title: KAR
  version: 1.0.0
paths:
  /actor/{actorType}/{actorId}/call-session/{session}/{path}:
    post:
      description: |-
        Call synchronously executes a `POST` to the `path` endpoint of the
        actor instance indicated by `actorType` and `actorId` passing
        through an optional JSON payload to the actor and responding with the
        result returned by the actor method.
      operationId: idCallActorSession
      responses:
        "200":
          $ref: '#/responses/callPath200Response'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      - https
      summary: 'call-session: Synchronously invoke an actor with given session ID.'
      tags:
      - actors
  /actor/{actorType}/{actorId}/call/{path}:
    post:
      description: |-
        Call synchronously executes a `POST` to the `path` endpoint of the
        actor instance indicated by `actorType` and `actorId` passing
        through an optional JSON payload to the actor and responding with the
        result returned by the actor method.
      operationId: idCallActor
      responses:
        "200":
          $ref: '#/responses/callPath200Response'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      - https
      summary: 'call: Synchronously invoke an actor.'
      tags:
      - actors
  /actor/{actorType}/{actorId}/migrate:
    get:
      description: 'TODO: Operation detailed description'
      operationId: idActorMigrate
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      - https
      summary: 'migrate: Request the migration of an actor'
      tags:
      - actors
  /actor/{actorType}/{actorId}/reminder:
    delete:
      description: |-
        This operation cancels reminders for the actor specified in the path.
        If a reminder id is provided as a parameter, only the reminder whose id
        matches that id will be cancelled. If no id is provided, all
        of the specified actor's reminders will be cancelled.  The number of reminders
        actually cancelled is returned as the result of the operation.
      operationId: idCancelReminder
      parameters:
      - description: |-
          The request body is an optional filter
          used to select a subset of an actor's reminders.
        in: body
        name: Body
        schema:
          $ref: '#/definitions/reminderFilter'
      responses:
        "200":
          $ref: '#/responses/cancelReminder200Response'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      - https
      summary: 'reminder: Cancel all matching reminders.'
      tags:
      - actors
    get:
      description: |-
        This operatation returns all reminders for the actor(s) specified in the path.
        If a reminder id is provided as a parameter, only reminders that
        have that id will be returned.
      operationId: idGetReminder
      parameters:
      - description: |-
          The request body is an optional filter
          used to select a subset of an actor's reminders.
        in: body
        name: Body
        schema:
          $ref: '#/definitions/reminderFilter'
      responses:
        "200":
          $ref: '#/responses/getReminder200Response'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      - https
      summary: 'reminder: Get all matching reminders.'
      tags:
      - actors
    post:
      description: |-
        This operatation schedules a reminder for the actor specified in the path.
        Consistient with the expected semantics of a `POST` operation, if there is
        already a reminder for the actor with the same reminderId, that
        existing reminder's schedule will be updated based on the request body.
        The method will not return until after the reminder is scheduled.
      operationId: idScheduleReminder
      parameters:
      - description: The request body describes the reminder to be scheduled
        in: body
        name: Body
        schema:
          $ref: '#/definitions/scheduleReminderPayload'
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      - https
      summary: 'reminder: Schedule a reminder.'
      tags:
      - actors
  /actor/{actorType}/{actorId}/state:
    delete:
      description: 'TODO: Operation detailed description'
      operationId: idActorStateDeleteAll
      schemes:
      - http
      - https
      summary: 'state: Delete all key-value pairs in an actor''s state.'
      tags:
      - actors
    get:
      description: 'TODO: Operation detailed description'
      operationId: idActorStateGetAll
      schemes:
      - http
      - https
      summary: 'state: Get all key-value pairs in an actor''s state.'
      tags:
      - actors
  /actor/{actorType}/{actorId}/state-404/{key}:
    get:
      description: 'TODO: Operation detailed description'
      operationId: idActorStateGet404
      schemes:
      - http
      - https
      summary: 'state-404: Get the value associated with a key in an actor''s state
        returning 404 if not found.'
      tags:
      - actors
  /actor/{actorType}/{actorId}/state/{key}:
    delete:
      description: 'TODO: Operation detailed description'
      operationId: idActorStateDeleteKey
      schemes:
      - http
      - https
      summary: 'state: Remove a key-value pair in an actor''s state.'
      tags:
      - actors
    post:
      description: 'TODO: Operation detailed description'
      operationId: idActorStateSet
      schemes:
      - http
      - https
      summary: 'state: Store a key-value pair in an actor''s state'
      tags:
      - actors
  /actor/{actorType}/{actorId}/tell/{path}:
    post:
      description: |-
        Actor-tell asynchronously executes a `POST` to the `path` endpoint of the
        actor instance indicated by `actorType` and `actorId` passing through
        the optional JSON payload it received.  A `200` response indicates that
        the request has been accepted by the runtime and will eventually be delivered to
        the targeted actor method.
      operationId: idTellActor
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      - https
      summary: 'tell: Asynchronosuly invoke an actor.'
      tags:
      - actors
  /event/{topic}/publish:
    post:
      description: 'TODO: Operation detailed description'
      operationId: eventPublishId
      schemes:
      - http
      - https
      summary: 'publish: Publish an event to a topic.'
      tags:
      - events
  /event/{topic}/subscribe:
    post:
      description: 'TODO: Operation detailed description'
      operationId: eventSubscribeId
      schemes:
      - http
      - https
      summary: 'subscribe: Subscribe to a topic.'
      tags:
      - events
  /event/{topic}/unsubscribe:
    post:
      description: 'TODO: Operation detailed description'
      operationId: eventUnsubscribeId
      schemes:
      - http
      - https
      summary: 'unsubscribe: Unsubscribe from a topic.'
      tags:
      - events
  /service/{service}/call/{path}:
    post:
      description: |-
        Call synchronously executes a `POST` to the `path` endpoint of `service` passing
        through an optional JSON payload to the service and responding with the
        result returned by the service.
      operationId: idCallService
      responses:
        "200":
          $ref: '#/responses/callPath200Response'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      - https
      summary: 'call: Synchronously invoke a service.'
      tags:
      - services
  /service/{service}/tell/{path}:
    post:
      description: |-
        Tell asynchronously executes a `POST` to the `path` endpoint of `service` passing
        through the optional JSON payload it received. A `200` response indicates that
        the request has been accepted by the runtime and will eventually be delivered to
        the targeted service endpoint.
      operationId: idTellService
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      - https
      summary: 'tell: Asynchronously invoke a service.'
      tags:
      - services
  /state/{actorType}/{actorId}/state/{key}:
    get:
      description: 'TODO: Operation detailed description'
      operationId: idActorStateGet
      schemes:
      - http
      - https
      summary: 'state: Get the value associated with a key in an actor''s state returning
        nil if not found.'
      tags:
      - actors
  /system/broadcast/{path}:
    post:
      description: |-
        The broadcast route causes a `POST` of `path` to be delivered to all
        KAR runtime processes that are currently part of the application.
        A `200` response indicates that the request to send the broadcast
        has been accepted and the POST will eventually be delivered to all sidecars.
      operationId: idBroadcast
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      - https
      summary: 'broadcast: send message to all KAR runtimes.'
      tags:
      - system
  /system/health:
    get:
      description: 'TODO: Operation detailed description'
      operationId: health
      schemes:
      - http
      - https
      summary: 'health: Health-check endpoint of a KAR runtime process.'
      tags:
      - system
  /system/kill:
    get:
      description: 'TODO: Operation detailed description'
      operationId: idKill
      schemes:
      - http
      - https
      summary: 'kill: Initiate an orderly shutdown of a KAR runtime process.'
      tags:
      - system
  /system/killall:
    get:
      description: 'TODO: Operation detailed description'
      operationId: idKillAll
      schemes:
      - http
      - https
      summary: 'killall: Initiate an orderly shutdown of all of an application''s
        KAR runtime processes.'
      tags:
      - system
produces:
- application/json
responses:
  callPath200Response:
    description: The response returned by the invoked endpoint
    headers:
      body:
        description: The response returned by the invoked endpoint
    schema:
      type: object
  cancelReminder200Response:
    headers:
      Body:
        description: The number of reminders that were actually cancelled
        example: 3
        format: int64
        type: integer
  getReminder200Response:
    headers:
      Body:
        description: An array containing all matching reminders
        example: '[{ Actor: { Type: ''Foo'', ID: ''22'' }, id: ''ticker'', path: ''/echo'',
          deadline: ''2020-04-14T14:17:51.073Z'', period: 5000000000, encodedData:
          ''{"msg":"hello"}'' }]'
        items:
          $ref: '#/definitions/Reminder'
        type: array
  response200:
    description: A success message.
    headers:
      body:
        description: A success message
        example: OK
        type: string
  response500:
    description: A message describing the error
    headers:
      body:
        description: A message describing the error
        example: Internal Server Error
        type: string
  response503:
    description: A message describing the error
    headers:
      body:
        description: A message describing the error
        example: Service Unavailable
        type: string
schemes:
- https,http
swagger: "2.0"
