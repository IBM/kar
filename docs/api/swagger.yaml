basePath: /kar/v1
consumes:
- application/json
definitions:
  Actor:
    properties:
      ID:
        type: string
      Type:
        type: string
    title: Actor uniquely identifies an actor instance.
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
  Duration:
    description: |-
      A Duration represents the elapsed time between two instants
      as an int64 nanosecond count. The representation limits the
      largest representable duration to approximately 290 years.
    format: int64
    type: integer
    x-go-package: time
  Reminder:
    description: Reminder describes a time-triggered asynchronous invocation of a
      Path on an Actor
    properties:
      Actor:
        $ref: '#/definitions/Actor'
      encodedData:
        type: string
        x-go-name: EncodedData
      id:
        type: string
        x-go-name: ID
      path:
        type: string
        x-go-name: Path
      period:
        $ref: '#/definitions/Duration'
      targetTime:
        format: date-time
        type: string
        x-go-name: TargetTime
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
  cloudeventWrapper:
    properties:
      data:
        description: The event payload
        type: object
        x-go-name: Data
      datacontenttype:
        description: RFC-2046 encoding of data type
        example: application/json
        type: string
        x-go-name: DataContentType
      dataschema:
        description: URI identifying the schema that `data` adheres to
        format: uri
        type: string
        x-go-name: DataSchema
      id:
        description: An event identifier
        type: string
        x-go-name: ID
      source:
        description: A URI identifying the event source
        format: uri
        type: string
        x-go-name: Source
      specversion:
        description: The version of the CloudEvent spec being used.
        example: "1.0"
        type: string
        x-go-name: SpecVersion
      subject:
        description: Describes the subject of the event in the context of the event
          producer
        type: string
        x-go-name: Subject
      time:
        description: Time when the event occurred
        format: date-time
        type: string
        x-go-name: Time
      type:
        description: The type of the event
        example: com.github.pull.create
        type: string
        x-go-name: Type
    required:
    - id
    - source
    - specversion
    - type
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
  eventSubscribeRequestBody:
    properties:
      actorId:
        description: The subscribing actor instance id
        type: string
        x-go-name: ActorID
      actorType:
        description: The subscribing actor type
        type: string
        x-go-name: ActorType
      id:
        description: |-
          A optional unique id to use for this subscrition.
          If not id is provided, the `topic` will be used as the id.
        type: string
        x-go-name: ID
      oldest:
        description: |-
          Should the subscription start with the oldest available event or
          only include events published after the subscription operation?
        type: boolean
        x-go-name: Oldest
      path:
        description: The target endpoint to which events will be delivered
        example: an/arbitrary/valid/pathSegment
        type: string
        x-go-name: Path
      service:
        description: The subscribing service name
        type: string
        x-go-name: Service
    required:
    - path
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
  eventUnsubscribeRequestBody:
    properties:
      id:
        description: |-
          The id of the subscription to be removed.
          If not id is provided, the `topic` will be used as the id.
        type: string
        x-go-name: ID
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
  scheduleReminderPayload:
    description: ScheduleReminderPayload is the JSON request body for scheduling a
      new reminder
    properties:
      data:
        description: |-
          An optional parameter containing an arbitrary JSON value that will be provided as the
          payload when the `path` is invoked on the actor instance.
        example: '{ msg: "Hello Friend!" }'
        type: object
        x-go-name: Data
      id:
        description: The ID to use for this reminder
        example: repeatingGreeter
        type: string
        x-go-name: ID
      path:
        description: The path to invoke on the actor instance when the reminder is
          fired
        example: sayHello
        type: string
        x-go-name: Path
      period:
        description: |-
          The optional period parameter is a string encoding a GoLang Duration that is used to create a periodic reminder.
          If a period is provided, then the reminder will be fired repeatedly by adding the period to the last fire time
          to compute a new TargetTime for the next invocation of the reminder.
        example: 30s
        type: string
        x-go-name: Period
      targetTime:
        description: The time at which the reminder should first fire, specified as
          a string in an ISO-8601 compliant format
        format: date-time
        type: string
        x-go-name: TargetTime
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
info:
  description: |-
    This document describes the RESTful API provided by the
    Kubernetes Application Runtime (KAR). It consists of
    four logical sets of sub-APIs:
    + **Actors**: APIs to invoke actor methods, access actor state, and schedule reminders.
    + **Events**: APIs to subscribe and unsubscribe from event sources and to publish to event sinks
    + **Services**: APIs to invoke service endpoints
    + **System**: APIs for controlling the KAR runtime mesh

    All operations are scoped to a single instance of an application.
  title: KAR
  version: v1
paths:
  /actor/{actorType}/{actorId}/call/{path}:
    post:
      description: |-
        ### Invoke an actor method

        Call executes a `POST` to the `path` endpoint of the
        actor instance indicated by `actorType` and `actorId`.
        The JSON request body is passed through to the target endpoint.
        The result of the call is the result of invoking the target actor method
        unless the `async` pragma header is specified.
      operationId: idActorCall
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      - description: Optionally specify the `async` pragma to make a non-blocking
          call.
        in: header
        name: Pragma
        type: string
      - description: The target endpoint to be invoked by the operation
        example: an/arbitrary/valid/pathSegment
        in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      - description: Optionally specific the session to use when performing the call.  Enables
          re-entrancy for nested actor calls.
        format: uuid
        in: query
        name: session
        type: string
        x-go-name: Session
      - description: An arbitrary JSON value to be passed through unchanged to the
          target endpoint
        in: body
        name: TargetRequestBody
        schema:
          type: object
      responses:
        "200":
          $ref: '#/responses/response200CallResult'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
        default:
          $ref: '#/responses/responseGenericEndpointError'
      schemes:
      - http
      summary: call
      tags:
      - actors
  /actor/{actorType}/{actorId}/migrate:
    post:
      description: |-
        ### Initiate an actor migration

        This operation is primarily intended to be used by the KAR actor runtime.
        When delivered to the runtime currently hosting the designated actor instance,
        it causes the actor to be passivated and the binding of the actor instance to
        that runtime to be removed from the KAR actor placement service. When next
        activated, the actor instance may be hosted by a different instance of the
        application process.
      operationId: idActorMigrate
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: migrate
      tags:
      - actors
  /actor/{actorType}/{actorId}/reminders:
    delete:
      description: |-
        ### Cancel all reminders

        This operation cancels all reminders for the actor instance specified in the path.
        The number of reminders cancelled is returned as the result of the operation.
      operationId: idActorReminderCancelAll
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      responses:
        "200":
          $ref: '#/responses/response200ReminderCancelAllResult'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: reminders
      tags:
      - actors
    get:
      description: |-
        ### Get all reminders

        This operation returns all reminders for the actor instance specified in the path.
      operationId: idActorReminderGetAll
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      responses:
        "200":
          $ref: '#/responses/response200ReminderGetAllResult'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: reminders
      tags:
      - actors
    post:
      description: |-
        ### Schedule a reminder

        This operation schedules a reminder for the actor instance specified in the path
        as described by the data provided in the request body.
        If there is already a reminder for the target actor instance with the same reminderId,
        that existing reminder's schedule will be updated based on the request body.
        The operation will not return until after the reminder is scheduled.
      operationId: idActorReminderSchedule
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      - description: The request body describes the reminder to be scheduled
        in: body
        name: Body
        schema:
          $ref: '#/definitions/scheduleReminderPayload'
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: reminders
      tags:
      - actors
  /actor/{actorType}/{actorId}/reminders/{reminderId}:
    delete:
      description: |-
        ### Cancel a reminder

        This operation cancels the reminder for the actor instance specified in the path.
        If the reminder is successfully cancelled a `200` response with a body of `1` will be returned.
        If the reminder is not found, a `404` response will be returned unless
        the boolean query parameter `nilOnAbsent` is set to `true`. If `nilOnAbsent`
        is sent to true the `404` response will instead be a `200` with a body containing `0`.
      operationId: idActorReminderCancel
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      - description: The id of the specific reminder being targeted
        in: path
        name: reminderId
        required: true
        type: string
        x-go-name: ReminderID
      - description: Replace a REST-style `404` response with a `200` and nil response
          body when the requested key is not found.
        in: query
        name: nilOnAbsent
        type: boolean
        x-go-name: ErrorOnAbsent
      responses:
        "200":
          $ref: '#/responses/response200ReminderCancelResult'
        "404":
          $ref: '#/responses/response404'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: reminders/id
      tags:
      - actors
    get:
      description: |-
        ### Get a reminder

        This operation returns the reminder for the actor instance specified in the path.
        If there is no reminder with the id `reminderId` a `404` response will be returned
        unless the boolean query parameter `nilOnAbsent` is set to `true`.
        If `nilOnAbsent` is true the `404` response will be replaced with
        a `200` response with a `nil` response body.
      operationId: idActorReminderGet
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      - description: The id of the specific reminder being targeted
        in: path
        name: reminderId
        required: true
        type: string
        x-go-name: ReminderID
      - description: Replace a REST-style `404` response with a `200` and nil response
          body when the requested key is not found.
        in: query
        name: nilOnAbsent
        type: boolean
        x-go-name: ErrorOnAbsent
      responses:
        "200":
          $ref: '#/responses/response200ReminderGetResult'
        "404":
          $ref: '#/responses/response404'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      summary: reminders/id
      tags:
      - actors
  /actor/{actorType}/{actorId}/state:
    delete:
      description: |-
        ### Remove an actor's state

        The state of the actor instance indicated by `actorType` and `actorId`
        will be deleted.
      operationId: idActorStateDeleteAll
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      responses:
        "200":
          $ref: '#/responses/response200StateDeleteResult'
        "404":
          $ref: '#/responses/response404'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: state
      tags:
      - actors
    get:
      description: |-
        ### Get an actor's state

        The state of the actor instance indicated by `actorType` and `actorId`
        will be returned as the response body.
      operationId: idActorStateGetAll
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      responses:
        "200":
          $ref: '#/responses/response200StateGetAllResult'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: state
      tags:
      - actors
    post:
      description: |-
        ### Update multiple entries of an actor's state

        The state of the actor instance indicated by `actorType` and `actorId`
        will be updated by atomically updated by storing all key-value pairs
        in the request body.
        The operation will not return until the state has been updated.
        The result of the operation is the number of new entires that were created.
      operationId: idActorStateSetMultiple
      parameters:
      - description: A map containing the state updates to perform
        in: body
        name: Body
        schema:
          additionalProperties:
            type: object
          type: object
      responses:
        "200":
          $ref: '#/responses/response200StateSetMultipleResult'
        "400":
          $ref: '#/responses/response400'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: state
      tags:
      - actors
  /actor/{actorType}/{actorId}/state/{key}:
    delete:
      description: |-
        ### Remove a single entry in an actor's state

        The state of the actor instance indicated by `actorType` and `actorId`
        will be updated by removing the entry for `key`.
        The operation will not return until the state has been updated.
        The result of the operation is `1` if an entry was actually removed and
        `0` if there was no entry for `key`.
      operationId: idActorStateDelete
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      responses:
        "200":
          $ref: '#/responses/response200StateDeleteResult'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: state/key
      tags:
      - actors
    get:
      description: |-
        ### Get a single entry of an actor's state

        The `key` entry of the state of the actor instance indicated by `actorType` and `actorId`
        will be returned as the response body.
        If there is no entry for `key` a `404` response will be returned
        unless the boolean query parameter `nilOnAbsent` is set to `true`,
        in which case a `200` reponse with a `nil` response body will be returned.
      operationId: idActorStateGet
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      - description: Replace a REST-style `404` response with a `200` and nil response
          body when the requested key is not found.
        in: query
        name: nilOnAbsent
        type: boolean
        x-go-name: ErrorOnAbsent
      responses:
        "200":
          $ref: '#/responses/response200StateGetResult'
        "404":
          $ref: '#/responses/response404'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: state/key
      tags:
      - actors
    put:
      description: |-
        ### Update a single entry of an actor's state

        The state of the actor instance indicated by `actorType` and `actorId`
        will be updated by setting `key` to contain the JSON request body.
        The operation will not return until the state has been updated.
        The result of the operation is `1` if a new entry was created and `0` if an existing entry was updated.
      operationId: idActorStateSet
      parameters:
      - description: The actor type
        in: path
        name: actorType
        required: true
        type: string
        x-go-name: ActorType
      - description: The actor instance id
        in: path
        name: actorId
        required: true
        type: string
        x-go-name: ActorID
      responses:
        "200":
          $ref: '#/responses/response200StateSetResult'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: state/key
      tags:
      - actors
  /event/{topic}/publish:
    post:
      description: |-
        ### Publish an event to a topic

        The event provided as the request body will be published on `topic`.
        When the operation returns successfully, the event is guaranteed to
        eventually be published to the targeted topic.
      operationId: idEventPublish
      parameters:
      - description: The topic name
        in: path
        name: topic
        required: true
        type: string
        x-go-name: Topic
      - description: A JSON value conforming to the CloudEvent specification
        in: body
        name: Event
        schema:
          $ref: '#/definitions/cloudeventWrapper'
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: publish
      tags:
      - events
  /event/{topic}/subscribe:
    post:
      description: |-
        ### Subscribe to a topic

        Subscribe an application endpoint to be invoked when events are delivered to
        the targeted `topic`.  The endpoint is described in the request body and
        may be either a service endpoint or an actor method.
      operationId: idEventSubscribe
      parameters:
      - description: The topic name
        in: path
        name: topic
        required: true
        type: string
        x-go-name: Topic
      - description: The target endpoint to be invoked by the operation
        example: an/arbitrary/valid/pathSegment
        in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/eventSubscribeRequestBody'
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: subscribe
      tags:
      - events
  /event/{topic}/unsubscribe:
    post:
      description: |-
        ### Unsubscribe from a topic

        Unsubscribe an application endpoint described by the request body from `topic`.
        The operation may return before it actually completes, but upon
        success it is guaranteed that the endpoint will eventually stop receive
        events from the topic.
      operationId: idEventUnsubscribe
      parameters:
      - description: The topic name
        in: path
        name: topic
        required: true
        type: string
        x-go-name: Topic
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/eventUnsubscribeRequestBody'
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
      schemes:
      - http
      summary: unsubscribe
      tags:
      - events
  /service/{service}/call/{path}:
    post:
      description: |-
        ### Invoke a service endpoint

        Call executes a `POST` to the `path` endpoint of `service`.
        The JSON request body is passed through to the target endpoint.
        The result of the call is the result of invoking the target service endpoint
        unless the `async` pragma header is specified.
      operationId: idServiceCall
      parameters:
      - description: The service name
        in: path
        name: service
        required: true
        type: string
        x-go-name: Service
      - description: Optionally specify the `async` pragma to make a non-blocking
          call.
        in: header
        name: Pragma
        type: string
      - description: The target endpoint to be invoked by the operation
        example: an/arbitrary/valid/pathSegment
        in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      - description: An arbitrary JSON value to be passed through unchanged to the
          target endpoint
        in: body
        name: TargetRequestBody
        schema:
          type: object
      responses:
        "200":
          $ref: '#/responses/response200CallResult'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
        default:
          $ref: '#/responses/responseGenericEndpointError'
      schemes:
      - http
      summary: call
      tags:
      - services
  /system/broadcast/{path}:
    post:
      description: |-
        ### Asynchronously broadcast a message to the KAR runtime

        Broadcast asynchronously executes a `POST` on the `path` endpoint
        of all other KAR runtimes that are currently part of the application.
        The runtime initiating the broadcast is not included as a recipient.
        A `200` response indicates that the request to send the broadcast
        has been accepted and the POST will eventually be delivered to all targeted
        runtime processes.
      operationId: idSystemBroadcast
      parameters:
      - description: The target endpoint to be invoked by the operation
        example: an/arbitrary/valid/pathSegment
        in: path
        name: path
        required: true
        type: string
        x-go-name: Path
      - description: An arbitrary JSON value to be passed through unchanged to the
          target endpoint
        in: body
        name: TargetRequestBody
        schema:
          type: object
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      summary: broadcast
      tags:
      - system
  /system/health:
    get:
      description: |-
        ### Health-check endpoint

        Returns a `200` response to indicate that the KAR runtime processes is healthy.
      operationId: isSystemHealth
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      summary: health
      tags:
      - system
  /system/kill:
    post:
      description: |-
        ### Shutdown a single KAR runtime

        Initiate an orderly shutdown of the target KAR runtime process.
      operationId: idSystemKill
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      summary: kill
      tags:
      - system
  /system/killall:
    post:
      description: |-
        ### Shutdown the KAR runtime mesh for an application

        Initiate an orderly shutdown of all KAR runtime processes.
      operationId: idSystemKillAll
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      summary: killall
      tags:
      - system
produces:
- application/json
responses:
  response200:
    description: A success message.
    headers:
      body:
        description: A success message
        example: OK
        type: string
  response200CallResult:
    description: The response body returned by the invoked endpoint
    headers:
      body:
        description: The response body returned by the invoked endpoint
    schema:
      type: object
  response200ReminderCancelAllResult:
    headers:
      NumberCancelled:
        description: The number of reminders that were actually cancelled
        example: 3
        format: int64
        type: integer
  response200ReminderCancelResult:
    headers:
      NumberCancelled:
        description: Returns 1 if a reminder was cancelled, 0 if not found and `nilOnError`
          was true
        format: int64
        type: integer
  response200ReminderGetAllResult:
    headers:
      Body:
        description: An array containing all matching reminders
        example: '[{ Actor: { Type: ''Foo'', ID: ''22'' }, id: ''ticker'', path: ''/echo'',
          targetTime: ''2020-04-14T14:17:51.073Z'', period: 5000000000, encodedData:
          ''{"msg":"hello"}'' }, { Actor: { Type: ''Foo'', ID: ''22'' }, id: ''once'',
          path: ''/echo'', targetTime: ''2020-04-14T14:20:00Z'', encodedData: ''{"msg":"carpe
          diem"}'' }]'
        items:
          $ref: '#/definitions/Reminder'
        type: array
  response200ReminderGetResult:
    headers:
      Body:
        description: The reminder
        example: '{ Actor: { Type: ''Foo'', ID: ''22'' }, id: ''ticker'', path: ''/echo'',
          targetTime: ''2020-04-14T14:17:51.073Z'', period: 5000000000, encodedData:
          ''{"msg":"hello"}'' }'
    schema:
      $ref: '#/definitions/Reminder'
  response200StateDeleteResult:
    headers:
      NumberDeleted:
        description: The number of key-value pairs that were deleted
        example: 3
        format: int64
        type: integer
  response200StateGetAllResult:
    headers:
      Response:
        description: A map containing the requested state
    schema:
      additionalProperties:
        type: object
      type: object
  response200StateGetResult:
    headers:
      Response:
        description: The requested value
    schema:
      type: object
  response200StateSetMultipleResult:
    headers:
      NumberCreated:
        description: Returns the number of new entries created by the operation
        format: int64
        type: integer
  response200StateSetResult:
    headers:
      NumberCreated:
        description: Returns 0 if an existing entry was updated and 1 if a new entry
          was created
        format: int64
        type: integer
  response400:
    description: Response indicating a bad request
    headers:
      body:
        description: A message describing the problem with the request
        type: string
  response404:
    description: Response indicating requested resource is not found
    headers:
      body:
        description: Requested resource is not found
        example: Not Found
        type: string
  response500:
    description: A message describing the error
    headers:
      body:
        description: A message describing the error
        example: Internal Server Error
        type: string
  response503:
    description: A message describing the error
    headers:
      body:
        description: A message describing the error
        example: Service Unavailable
        type: string
  responseGenericEndpointError:
    description: An error response returned by the invoked endpoint
    headers:
      Body:
        description: The result body returned by the invoked endpoint
    schema:
      type: object
schemes:
- http
swagger: "2.0"
