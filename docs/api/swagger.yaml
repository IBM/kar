basePath: /kar
consumes:
- application/json
definitions:
  reminderFilter:
    properties:
      id:
        description: An optional reminder ID
        type: string
        x-go-name: ID
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
  scheduleReminderPayload:
    description: ScheduleReminderPayload is the JSON request body for scheduling a
      new reminder
    properties:
      data:
        description: |-
          An optional parameter containing an arbitray JSON value that will be provided as the
          payload when the `path` is invoked on the actor instance.
        type: object
        x-go-name: Data
      deadline:
        description: The time at which the reminder should first fire, specified as
          a string in an ISO-8601 compliant format
        format: date-time
        type: string
        x-go-name: Deadline
      id:
        description: The ID to use for this reminder
        type: string
        x-go-name: ID
      path:
        description: The path to invoke on the actor instance when the reminder is
          fired
        type: string
        x-go-name: Path
      period:
        description: |-
          The optional period parameter is a string encoding a GoLang Duration that is used to create a periodic reminder.
          If a period is provided, then the reminder will be fired repeatedly by adding the period to the last fire time
          to compute a new Deadline for the next invocation of the reminder.
        type: string
        x-go-name: Period
    type: object
    x-go-package: github.ibm.com/solsa/kar.git/internal/runtime
info:
  description: |-
    This document describes the RESTful API provided by the
    Kubernetes Application Runtime (KAR) runtime to application
    processes.
  title: KAR
  version: 1.0.0
paths:
  /actor-call-session/{actorType}/{actorId}/{session}/{path}:
    post:
      description: |-
        Call synchronously executes a `POST` to the `path` endpoint of the
        actor instance indicated by `actorType` and `actorId` passing
        through an optional JSON payload to the service and responding with the
        result returned by the actor method.

        TODO: Operation detailed description
      operationId: idCallActorSession
      schemes:
      - http
      - https
      summary: 'actor-call-session: Synchronously invoke an actor with given session
        ID.'
      tags:
      - actors
  /actor-call/{actorType}/{actorId}/{path}:
    post:
      description: |-
        Call synchronously executes a `POST` to the `path` endpoint of the
        actor instance indicated by `actorType` and `actorId` passing
        through an optional JSON payload to the service and responding with the
        result returned by the actor method.

        TODO: Operation detailed description
      operationId: idCallActor
      schemes:
      - http
      - https
      summary: 'actor-call: Synchronously invoke an actor.'
      tags:
      - actors
  /actor-migrate/{actorType}/{actorId}:
    get:
      description: 'TODO: Operation detailed description'
      operationId: idActorMigrate
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      - https
      summary: 'actor-migrate: Request the migration of an actor'
      tags:
      - actors
  /actor-reminder/{actorType}/{actorId}/cancel:
    post:
      description: |-
        This operatation cancels reminders for the actor specified in the path.
        If a reminder id is provided as a parameter, only the reminder that
        matches that id will be cancelled. If no id is provided, all
        of the specified actor's reminders will be cancelled.
      operationId: idCancelReminder
      parameters:
      - description: |-
          The request body is an optional filter
          used to select a subset of an actor's reminders.
        in: body
        name: Body
        schema:
          $ref: '#/definitions/reminderFilter'
      schemes:
      - http
      - https
      summary: 'actor-reminder/cancel: Cancel all matching reminders.'
      tags:
      - actors
  /actor-reminder/{actorType}/{actorId}/get:
    post:
      description: |-
        This operatation returns all reminders for the actor(s) specified in the path.
        If a reminder id is provided as a parameter, only reminders that
        have that id will be returned.
      operationId: idGetReminder
      parameters:
      - description: |-
          The request body is an optional filter
          used to select a subset of an actor's reminders.
        in: body
        name: Body
        schema:
          $ref: '#/definitions/reminderFilter'
      schemes:
      - http
      - https
      summary: 'actor-reminder/get: Get all matching reminders.'
      tags:
      - actors
  /actor-reminder/{actorType}/{actorId}/schedule:
    post:
      description: This operatation schedules a reminder for the actor specified in
        the path.
      operationId: idScheduleReminder
      parameters:
      - description: The request body describes the reminder to be scheduled
        in: body
        name: Body
        schema:
          $ref: '#/definitions/scheduleReminderPayload'
      schemes:
      - http
      - https
      summary: 'actor-reminder/schedule: Schedule a reminder.'
      tags:
      - actors
  /actor-state-404/{actorType}/{actorId}/{key}:
    get:
      description: 'TODO: Operation detailed description'
      operationId: idActorStateGet404
      schemes:
      - http
      - https
      summary: 'actor-state-404: Get the value associated with a key in an actor''s
        state returning 404 if not found.'
      tags:
      - actors
  /actor-state/{actorType}/{actorId}:
    delete:
      description: 'TODO: Operation detailed description'
      operationId: idActorStateDeleteAll
      schemes:
      - http
      - https
      summary: 'actor-state: Delete all key-value pairs in an actor''s state.'
      tags:
      - actors
    get:
      description: 'TODO: Operation detailed description'
      operationId: idActorStateGetAll
      schemes:
      - http
      - https
      summary: 'actor-state: Get all key-value pairs in an actor''s state.'
      tags:
      - actors
  /actor-state/{actorType}/{actorId}/{key}:
    delete:
      description: 'TODO: Operation detailed description'
      operationId: idActorStateDeleteKey
      schemes:
      - http
      - https
      summary: 'actor-state: Remove a key-value pair in an actor''s state.'
      tags:
      - actors
    get:
      description: 'TODO: Operation detailed description'
      operationId: idActorStateGet
      schemes:
      - http
      - https
      summary: 'actor-state: Get the value associated with a key in an actor''s state
        returning nil if not found.'
      tags:
      - actors
    post:
      description: 'TODO: Operation detailed description'
      operationId: idActorStateSet
      schemes:
      - http
      - https
      summary: 'actor-state: Store a key-value pair in an actor''s state'
      tags:
      - actors
  /actor-tell/{actorType}/{actorId}/{path}:
    post:
      description: |-
        Actor-tell asynchronously executes a `POST` to the `path` endpoint of the
        actor instance indicated by `actorType` and `actorId` passing through
        the optional JSON payload it received.
      operationId: idTellActor
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      - https
      summary: 'actor-tell: Asynchronosuly invoke an actor.'
      tags:
      - actors
  /broadcast/{path}:
    post:
      description: |-
        The broadcast route cases a `POST` of `path` to be delivered to all
        KAR runtime processes that are currently part of the application.
        A `200` response indicates that the request to send the broadcast
        has been accepted and the POST will eventually be delivered to all sidecars.
      operationId: idBroadcast
      responses:
        "200":
          $ref: '#/responses/response200'
      schemes:
      - http
      - https
      summary: 'broadcast: send message to all KAR runtimes.'
      tags:
      - utility
  /call/{service}/{path}:
    post:
      description: |-
        Call synchronously executes a `POST` to the `path` endpoint of `service` passing
        through an optional JSON payload to the service and responding with the
        result returned by the service.
      operationId: idCallService
      schemes:
      - http
      - https
      summary: 'call: Synchronously invoke a service.'
      tags:
      - services
  /health:
    get:
      description: 'TODO: Operation detailed description'
      operationId: health
      schemes:
      - http
      - https
      summary: 'health: Health-check endpoint of a KAR runtime process.'
      tags:
      - utility
  /kill:
    get:
      description: 'TODO: Operation detailed description'
      operationId: idKill
      schemes:
      - http
      - https
      summary: 'kill: Initiate an orderly shutdown of a KAR runtime process.'
      tags:
      - utility
  /killall:
    get:
      description: 'TODO: Operation detailed description'
      operationId: idKillAll
      schemes:
      - http
      - https
      summary: 'killall: Initiate an orderly shutdown of all of an application''s
        KAR runtime processes.'
      tags:
      - utility
  /tell/{service}/{path}:
    post:
      description: |-
        Tell asynchronously executes a `POST` to the `path` endpoint of `service` passing
        through the optional JSON payload it received.
      operationId: idTellService
      responses:
        "200":
          $ref: '#/responses/response200'
        "500":
          $ref: '#/responses/response500'
        "503":
          $ref: '#/responses/response503'
      schemes:
      - http
      - https
      summary: 'tell: Asynchronously invoke a service.'
      tags:
      - services
produces:
- application/json
responses:
  response200:
    description: A success message.
    headers:
      Body:
        description: A success message
        example: OK
        type: string
  response500:
    description: A message describing the error
    headers:
      Body:
        description: A message describing the error
        type: string
  response503:
    description: A message describing the error
    headers:
      Body:
        description: A message describing the error
        type: string
schemes:
- https,http
swagger: "2.0"
