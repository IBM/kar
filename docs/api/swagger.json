{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This document describes the RESTful API provided by the\nKubernetes Application Runtime (KAR) runtime to application\nprocesses.",
    "title": "KAR",
    "version": "v1"
  },
  "basePath": "/kar/v1",
  "paths": {
    "/actor/{actorType}/{actorId}/call/{path}": {
      "post": {
        "description": "### Synchronously invoke an actor\n\nCall synchronously executes a `POST` to the `path` endpoint of the\nactor instance indicated by `actorType` and `actorId` passing\nthrough an optional JSON payload to the actor and responding with the\nresult returned by the actor method.",
        "schemes": [
          "http"
        ],
        "tags": [
          "actors"
        ],
        "summary": "call",
        "operationId": "idActorCall",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ActorType",
            "description": "The actor type",
            "name": "actorType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActorID",
            "description": "The actor instance id",
            "name": "actorId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The target endpoint to be invoked by the operation",
            "name": "path",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Session",
            "description": "Optionally specific the session to use when performing the call.  Enables re-entrancy for nested actor calls.",
            "name": "session",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/callPath200Response"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    },
    "/actor/{actorType}/{actorId}/migrate": {
      "get": {
        "description": "### Request the migration of an actor\n\nTODO: Operation detailed description",
        "schemes": [
          "http"
        ],
        "tags": [
          "actors"
        ],
        "summary": "migrate",
        "operationId": "idActorMigrate",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ActorType",
            "description": "The actor type",
            "name": "actorType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActorID",
            "description": "The actor instance id",
            "name": "actorId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response200"
          }
        }
      }
    },
    "/actor/{actorType}/{actorId}/reminder": {
      "get": {
        "description": "### Get all matching reminders\n\nThis operatation returns all reminders for the actor(s) specified in the path.\nIf a reminder id is provided as a parameter, only reminders that\nhave that id will be returned.",
        "schemes": [
          "http"
        ],
        "tags": [
          "actors"
        ],
        "summary": "reminder",
        "operationId": "idActorReminderGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ActorType",
            "description": "The actor type",
            "name": "actorType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActorID",
            "description": "The actor instance id",
            "name": "actorId",
            "in": "path",
            "required": true
          },
          {
            "description": "The request body is an optional filter\nused to select a subset of an actor's reminders.",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/reminderFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getReminder200Response"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      },
      "post": {
        "description": "### Schedule a reminder\n\nThis operatation schedules a reminder for the actor specified in the path.\nConsistient with the expected semantics of a `POST` operation, if there is\nalready a reminder for the actor with the same reminderId, that\nexisting reminder's schedule will be updated based on the request body.\nThe method will not return until after the reminder is scheduled.",
        "schemes": [
          "http"
        ],
        "tags": [
          "actors"
        ],
        "summary": "reminder",
        "operationId": "idActorReminderSchedule",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ActorType",
            "description": "The actor type",
            "name": "actorType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActorID",
            "description": "The actor instance id",
            "name": "actorId",
            "in": "path",
            "required": true
          },
          {
            "description": "The request body describes the reminder to be scheduled",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/scheduleReminderPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response200"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      },
      "delete": {
        "description": "### Cancel all matching reminders\n\nThis operation cancels reminders for the actor specified in the path.\nIf a reminder id is provided as a parameter, only the reminder whose id\nmatches that id will be cancelled. If no id is provided, all\nof the specified actor's reminders will be cancelled.  The number of reminders\nactually cancelled is returned as the result of the operation.",
        "schemes": [
          "http"
        ],
        "tags": [
          "actors"
        ],
        "summary": "reminder",
        "operationId": "idActorReminderCancel",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ActorType",
            "description": "The actor type",
            "name": "actorType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActorID",
            "description": "The actor instance id",
            "name": "actorId",
            "in": "path",
            "required": true
          },
          {
            "description": "The request body is an optional filter\nused to select a subset of an actor's reminders.",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/reminderFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/cancelReminder200Response"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    },
    "/actor/{actorType}/{actorId}/state": {
      "get": {
        "description": "### Get all key-value pairs in an actor's state\n\nTODO: Operation detailed description",
        "schemes": [
          "http"
        ],
        "tags": [
          "actors"
        ],
        "summary": "state",
        "operationId": "idActorStateGetAll",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ActorType",
            "description": "The actor type",
            "name": "actorType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActorID",
            "description": "The actor instance id",
            "name": "actorId",
            "in": "path",
            "required": true
          }
        ]
      },
      "delete": {
        "description": "### Delete all key-value pairs in an actor's state\n\nTODO: Operation detailed description",
        "schemes": [
          "http"
        ],
        "tags": [
          "actors"
        ],
        "summary": "state",
        "operationId": "idActorStateDeleteAll",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ActorType",
            "description": "The actor type",
            "name": "actorType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActorID",
            "description": "The actor instance id",
            "name": "actorId",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/actor/{actorType}/{actorId}/state/{key}": {
      "get": {
        "description": "### Get the value associated with a key in an actor's state.\n\nTODO: Operation detailed description",
        "schemes": [
          "http"
        ],
        "tags": [
          "actors"
        ],
        "summary": "state/key",
        "operationId": "idActorStateGet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ActorType",
            "description": "The actor type",
            "name": "actorType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActorID",
            "description": "The actor instance id",
            "name": "actorId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "ErrorOnAbsent",
            "description": "Controls response when key is absent; if true an absent key will result in a `404` response, otherwise a `200` response with a nil value will be returned.",
            "name": "errorOnAbsent",
            "in": "query"
          }
        ]
      },
      "post": {
        "description": "### Store a key-value pair in an actor's state\n\nTODO: Operation detailed description",
        "schemes": [
          "http"
        ],
        "tags": [
          "actors"
        ],
        "summary": "state/key",
        "operationId": "idActorStateSet",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ActorType",
            "description": "The actor type",
            "name": "actorType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActorID",
            "description": "The actor instance id",
            "name": "actorId",
            "in": "path",
            "required": true
          }
        ]
      },
      "delete": {
        "description": "### Remove a key-value pair in an actor's state.\n\nTODO: Operation detailed description",
        "schemes": [
          "http"
        ],
        "tags": [
          "actors"
        ],
        "summary": "state/key",
        "operationId": "idActorStateDelete",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ActorType",
            "description": "The actor type",
            "name": "actorType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActorID",
            "description": "The actor instance id",
            "name": "actorId",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/actor/{actorType}/{actorId}/tell/{path}": {
      "post": {
        "description": "### Asynchronosuly invoke an actor\n\nActor-tell asynchronously executes a `POST` to the `path` endpoint of the\nactor instance indicated by `actorType` and `actorId` passing through\nthe optional JSON payload it received.  A `200` response indicates that\nthe request has been accepted by the runtime and will eventually be delivered to\nthe targeted actor method.",
        "schemes": [
          "http"
        ],
        "tags": [
          "actors"
        ],
        "summary": "tell",
        "operationId": "idActorTell",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ActorType",
            "description": "The actor type",
            "name": "actorType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ActorID",
            "description": "The actor instance id",
            "name": "actorId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The target endpoint to be invoked by the operation",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response200"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    },
    "/event/{topic}/publish": {
      "post": {
        "description": "### Publish an event to a topic\n\nTODO: Operation detailed description",
        "schemes": [
          "http"
        ],
        "tags": [
          "events"
        ],
        "summary": "publish",
        "operationId": "idEventPublish",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Topic",
            "description": "The topic name",
            "name": "topic",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/event/{topic}/subscribe": {
      "post": {
        "description": "### Subscribe to a topic\n\nTODO: Operation detailed description",
        "schemes": [
          "http"
        ],
        "tags": [
          "events"
        ],
        "summary": "subscribe",
        "operationId": "idEventSubscribe",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Topic",
            "description": "The topic name",
            "name": "topic",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The target endpoint to be invoked by the operation",
            "name": "path",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/event/{topic}/unsubscribe": {
      "post": {
        "description": "### Unsubscribe from a topic\n\nTODO: Operation detailed description",
        "schemes": [
          "http"
        ],
        "tags": [
          "events"
        ],
        "summary": "unsubscribe",
        "operationId": "idEventUnsubscribe",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Topic",
            "description": "The topic name",
            "name": "topic",
            "in": "path",
            "required": true
          }
        ]
      }
    },
    "/service/{service}/call/{path}": {
      "post": {
        "description": "### Synchronously invoke a service\n\nCall synchronously executes a `POST` to the `path` endpoint of `service` passing\nthrough an optional JSON payload to the service and responding with the\nresult returned by the service.",
        "schemes": [
          "http"
        ],
        "tags": [
          "services"
        ],
        "summary": "call",
        "operationId": "idServiceCall",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Service",
            "description": "The service name",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The target endpoint to be invoked by the operation",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/callPath200Response"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    },
    "/service/{service}/tell/{path}": {
      "post": {
        "description": "### Asynchronously invoke a service\n\nTell asynchronously executes a `POST` to the `path` endpoint of `service` passing\nthrough the optional JSON payload it received. A `200` response indicates that\nthe request has been accepted by the runtime and will eventually be delivered to\nthe targeted service endpoint.",
        "schemes": [
          "http"
        ],
        "tags": [
          "services"
        ],
        "summary": "tell",
        "operationId": "idServiceTell",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Service",
            "description": "The service name",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The target endpoint to be invoked by the operation",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response200"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    },
    "/system/broadcast/{path}": {
      "post": {
        "description": "### Broadcast a message to all KAR runtimes.\n\nThe broadcast route causes a `POST` of `path` to be delivered to all\nKAR runtime processes that are currently part of the application.\nA `200` response indicates that the request to send the broadcast\nhas been accepted and the POST will eventually be delivered to all sidecars.",
        "schemes": [
          "http"
        ],
        "tags": [
          "system"
        ],
        "summary": "broadcast",
        "operationId": "idSystemBroadcast",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Path",
            "description": "The target endpoint to be invoked by the operation",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response200"
          }
        }
      }
    },
    "/system/health": {
      "get": {
        "description": "### Health-check endpoint of a KAR runtime process.\n\nTODO: Operation detailed description",
        "schemes": [
          "http"
        ],
        "tags": [
          "system"
        ],
        "summary": "health",
        "operationId": "isSystemHealth"
      }
    },
    "/system/kill": {
      "get": {
        "description": "### Initiate an orderly shutdown of this KAR runtime process.\n\nTODO: Operation detailed description",
        "schemes": [
          "http"
        ],
        "tags": [
          "system"
        ],
        "summary": "kill",
        "operationId": "idSystemKill"
      }
    },
    "/system/killall": {
      "get": {
        "description": "### Initiate an orderly shutdown of all of an application's KAR runtime processes.\n\nTODO: Operation detailed description",
        "schemes": [
          "http"
        ],
        "tags": [
          "system"
        ],
        "summary": "killall",
        "operationId": "idSystemKillAll"
      }
    }
  },
  "definitions": {
    "Actor": {
      "type": "object",
      "title": "Actor uniquely identifies an actor instance.",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      },
      "x-go-package": "github.ibm.com/solsa/kar.git/internal/runtime"
    },
    "Duration": {
      "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
      "type": "integer",
      "format": "int64",
      "x-go-package": "time"
    },
    "Reminder": {
      "description": "Reminder describes a time-triggered asynchronous invocation of a Path on an Actor",
      "type": "object",
      "properties": {
        "Actor": {
          "$ref": "#/definitions/Actor"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "encodedData": {
          "type": "string",
          "x-go-name": "EncodedData"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "period": {
          "$ref": "#/definitions/Duration"
        }
      },
      "x-go-package": "github.ibm.com/solsa/kar.git/internal/runtime"
    },
    "reminderFilter": {
      "type": "object",
      "properties": {
        "id": {
          "description": "An optional reminder ID",
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.ibm.com/solsa/kar.git/internal/runtime"
    },
    "scheduleReminderPayload": {
      "description": "ScheduleReminderPayload is the JSON request body for scheduling a new reminder",
      "type": "object",
      "properties": {
        "data": {
          "description": "An optional parameter containing an arbitray JSON value that will be provided as the\npayload when the `path` is invoked on the actor instance.",
          "type": "object",
          "x-go-name": "Data",
          "example": "{ msg: \"Hello Friend!\" }"
        },
        "deadline": {
          "description": "The time at which the reminder should first fire, specified as a string in an ISO-8601 compliant format",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "id": {
          "description": "The ID to use for this reminder",
          "type": "string",
          "x-go-name": "ID",
          "example": "repeatingGreeter"
        },
        "path": {
          "description": "The path to invoke on the actor instance when the reminder is fired",
          "type": "string",
          "x-go-name": "Path",
          "example": "sayHello"
        },
        "period": {
          "description": "The optional period parameter is a string encoding a GoLang Duration that is used to create a periodic reminder.\nIf a period is provided, then the reminder will be fired repeatedly by adding the period to the last fire time\nto compute a new Deadline for the next invocation of the reminder.",
          "type": "string",
          "x-go-name": "Period",
          "example": "30s"
        }
      },
      "x-go-package": "github.ibm.com/solsa/kar.git/internal/runtime"
    }
  },
  "responses": {
    "callPath200Response": {
      "description": "The response returned by the invoked endpoint",
      "schema": {
        "type": "object"
      },
      "headers": {
        "body": {
          "description": "The response returned by the invoked endpoint"
        }
      }
    },
    "cancelReminder200Response": {
      "headers": {
        "Body": {
          "type": "integer",
          "format": "int64",
          "example": 3,
          "description": "The number of reminders that were actually cancelled"
        }
      }
    },
    "getReminder200Response": {
      "headers": {
        "Body": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reminder"
          },
          "example": "[{ Actor: { Type: 'Foo', ID: '22' }, id: 'ticker', path: '/echo', deadline: '2020-04-14T14:17:51.073Z', period: 5000000000, encodedData: '{\"msg\":\"hello\"}' }]",
          "description": "An array containing all matching reminders"
        }
      }
    },
    "response200": {
      "description": "A success message.",
      "headers": {
        "body": {
          "type": "string",
          "example": "OK",
          "description": "A success message"
        }
      }
    },
    "response500": {
      "description": "A message describing the error",
      "headers": {
        "body": {
          "type": "string",
          "example": "Internal Server Error",
          "description": "A message describing the error"
        }
      }
    },
    "response503": {
      "description": "A message describing the error",
      "headers": {
        "body": {
          "type": "string",
          "example": "Service Unavailable",
          "description": "A message describing the error"
        }
      }
    }
  }
}