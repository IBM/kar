{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https,http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This document describes the RESTful API provided by the\nKubernetes Application Runtime (KAR) runtime to application\nprocesses.",
    "title": "KAR",
    "version": "1.0.0"
  },
  "basePath": "/kar",
  "paths": {
    "/actor-call-session/{actorType}/{actorId}/{session}/{path}": {
      "post": {
        "description": "Call synchronously executes a `POST` to the `path` endpoint of the\nactor instance indicated by `actorType` and `actorId` passing\nthrough an optional JSON payload to the actor and responding with the\nresult returned by the actor method.",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-call-session: Synchronously invoke an actor with given session ID.",
        "operationId": "idCallActorSession",
        "responses": {
          "200": {
            "$ref": "#/responses/callPath200Response"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    },
    "/actor-call/{actorType}/{actorId}/{path}": {
      "post": {
        "description": "Call synchronously executes a `POST` to the `path` endpoint of the\nactor instance indicated by `actorType` and `actorId` passing\nthrough an optional JSON payload to the actor and responding with the\nresult returned by the actor method.",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-call: Synchronously invoke an actor.",
        "operationId": "idCallActor",
        "responses": {
          "200": {
            "$ref": "#/responses/callPath200Response"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    },
    "/actor-migrate/{actorType}/{actorId}": {
      "get": {
        "description": "TODO: Operation detailed description",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-migrate: Request the migration of an actor",
        "operationId": "idActorMigrate",
        "responses": {
          "200": {
            "$ref": "#/responses/response200"
          }
        }
      }
    },
    "/actor-reminder/{actorType}/{actorId}/cancel": {
      "post": {
        "description": "This operation cancels reminders for the actor specified in the path.\nIf a reminder id is provided as a parameter, only the reminder whose id\nmatches that id will be cancelled. If no id is provided, all\nof the specified actor's reminders will be cancelled.  The number of reminders\nactually cancelled is returned as the result of the operation.",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-reminder/cancel: Cancel all matching reminders.",
        "operationId": "idCancelReminder",
        "parameters": [
          {
            "description": "The request body is an optional filter\nused to select a subset of an actor's reminders.",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/reminderFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/cancelReminder200Response"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    },
    "/actor-reminder/{actorType}/{actorId}/get": {
      "post": {
        "description": "This operatation returns all reminders for the actor(s) specified in the path.\nIf a reminder id is provided as a parameter, only reminders that\nhave that id will be returned.",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-reminder/get: Get all matching reminders.",
        "operationId": "idGetReminder",
        "parameters": [
          {
            "description": "The request body is an optional filter\nused to select a subset of an actor's reminders.",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/reminderFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getReminder200Response"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    },
    "/actor-reminder/{actorType}/{actorId}/schedule": {
      "post": {
        "description": "This operatation schedules a reminder for the actor specified in the path.\nConsistient with the expected semantics of a `POST` operation, if there is\nalready a reminder for the actor with the same reminderId, that\nexisting reminder's schedule will be updated based on the request body.\nThe method will not return until after the reminder is scheduled.",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-reminder/schedule: Schedule a reminder.",
        "operationId": "idScheduleReminder",
        "parameters": [
          {
            "description": "The request body describes the reminder to be scheduled",
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/scheduleReminderPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/response200"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    },
    "/actor-state-404/{actorType}/{actorId}/{key}": {
      "get": {
        "description": "TODO: Operation detailed description",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-state-404: Get the value associated with a key in an actor's state returning 404 if not found.",
        "operationId": "idActorStateGet404"
      }
    },
    "/actor-state/{actorType}/{actorId}": {
      "get": {
        "description": "TODO: Operation detailed description",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-state: Get all key-value pairs in an actor's state.",
        "operationId": "idActorStateGetAll"
      },
      "delete": {
        "description": "TODO: Operation detailed description",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-state: Delete all key-value pairs in an actor's state.",
        "operationId": "idActorStateDeleteAll"
      }
    },
    "/actor-state/{actorType}/{actorId}/{key}": {
      "get": {
        "description": "TODO: Operation detailed description",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-state: Get the value associated with a key in an actor's state returning nil if not found.",
        "operationId": "idActorStateGet"
      },
      "post": {
        "description": "TODO: Operation detailed description",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-state: Store a key-value pair in an actor's state",
        "operationId": "idActorStateSet"
      },
      "delete": {
        "description": "TODO: Operation detailed description",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-state: Remove a key-value pair in an actor's state.",
        "operationId": "idActorStateDeleteKey"
      }
    },
    "/actor-tell/{actorType}/{actorId}/{path}": {
      "post": {
        "description": "Actor-tell asynchronously executes a `POST` to the `path` endpoint of the\nactor instance indicated by `actorType` and `actorId` passing through\nthe optional JSON payload it received.  A `200` response indicates that\nthe request has been accepted by the runtime and will eventually be delivered to\nthe targeted actor method.",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "actors"
        ],
        "summary": "actor-tell: Asynchronosuly invoke an actor.",
        "operationId": "idTellActor",
        "responses": {
          "200": {
            "$ref": "#/responses/response200"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    },
    "/broadcast/{path}": {
      "post": {
        "description": "The broadcast route causes a `POST` of `path` to be delivered to all\nKAR runtime processes that are currently part of the application.\nA `200` response indicates that the request to send the broadcast\nhas been accepted and the POST will eventually be delivered to all sidecars.",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "utility"
        ],
        "summary": "broadcast: send message to all KAR runtimes.",
        "operationId": "idBroadcast",
        "responses": {
          "200": {
            "$ref": "#/responses/response200"
          }
        }
      }
    },
    "/call/{service}/{path}": {
      "post": {
        "description": "Call synchronously executes a `POST` to the `path` endpoint of `service` passing\nthrough an optional JSON payload to the service and responding with the\nresult returned by the service.",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "services"
        ],
        "summary": "call: Synchronously invoke a service.",
        "operationId": "idCallService",
        "responses": {
          "200": {
            "$ref": "#/responses/callPath200Response"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "TODO: Operation detailed description",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "utility"
        ],
        "summary": "health: Health-check endpoint of a KAR runtime process.",
        "operationId": "health"
      }
    },
    "/kill": {
      "get": {
        "description": "TODO: Operation detailed description",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "utility"
        ],
        "summary": "kill: Initiate an orderly shutdown of a KAR runtime process.",
        "operationId": "idKill"
      }
    },
    "/killall": {
      "get": {
        "description": "TODO: Operation detailed description",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "utility"
        ],
        "summary": "killall: Initiate an orderly shutdown of all of an application's KAR runtime processes.",
        "operationId": "idKillAll"
      }
    },
    "/tell/{service}/{path}": {
      "post": {
        "description": "Tell asynchronously executes a `POST` to the `path` endpoint of `service` passing\nthrough the optional JSON payload it received. A `200` response indicates that\nthe request has been accepted by the runtime and will eventually be delivered to\nthe targeted service endpoint.",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "services"
        ],
        "summary": "tell: Asynchronously invoke a service.",
        "operationId": "idTellService",
        "responses": {
          "200": {
            "$ref": "#/responses/response200"
          },
          "500": {
            "$ref": "#/responses/response500"
          },
          "503": {
            "$ref": "#/responses/response503"
          }
        }
      }
    }
  },
  "definitions": {
    "Actor": {
      "type": "object",
      "title": "Actor uniquely identifies an actor instance.",
      "properties": {
        "ID": {
          "type": "string"
        },
        "Type": {
          "type": "string"
        }
      },
      "x-go-package": "github.ibm.com/solsa/kar.git/internal/runtime"
    },
    "Duration": {
      "description": "A Duration represents the elapsed time between two instants\nas an int64 nanosecond count. The representation limits the\nlargest representable duration to approximately 290 years.",
      "type": "integer",
      "format": "int64",
      "x-go-package": "time"
    },
    "Reminder": {
      "description": "Reminder describes a time-triggered asynchronous invocation of a Path on an Actor",
      "type": "object",
      "properties": {
        "Actor": {
          "$ref": "#/definitions/Actor"
        },
        "deadline": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "encodedData": {
          "type": "string",
          "x-go-name": "EncodedData"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "period": {
          "$ref": "#/definitions/Duration"
        }
      },
      "x-go-package": "github.ibm.com/solsa/kar.git/internal/runtime"
    },
    "reminderFilter": {
      "type": "object",
      "properties": {
        "id": {
          "description": "An optional reminder ID",
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.ibm.com/solsa/kar.git/internal/runtime"
    },
    "scheduleReminderPayload": {
      "description": "ScheduleReminderPayload is the JSON request body for scheduling a new reminder",
      "type": "object",
      "properties": {
        "data": {
          "description": "An optional parameter containing an arbitray JSON value that will be provided as the\npayload when the `path` is invoked on the actor instance.",
          "type": "object",
          "x-go-name": "Data",
          "example": "{ msg: \"Hello Friend!\" }"
        },
        "deadline": {
          "description": "The time at which the reminder should first fire, specified as a string in an ISO-8601 compliant format",
          "type": "string",
          "format": "date-time",
          "x-go-name": "Deadline"
        },
        "id": {
          "description": "The ID to use for this reminder",
          "type": "string",
          "x-go-name": "ID",
          "example": "repeatingGreeter"
        },
        "path": {
          "description": "The path to invoke on the actor instance when the reminder is fired",
          "type": "string",
          "x-go-name": "Path",
          "example": "sayHello"
        },
        "period": {
          "description": "The optional period parameter is a string encoding a GoLang Duration that is used to create a periodic reminder.\nIf a period is provided, then the reminder will be fired repeatedly by adding the period to the last fire time\nto compute a new Deadline for the next invocation of the reminder.",
          "type": "string",
          "x-go-name": "Period",
          "example": "30s"
        }
      },
      "x-go-package": "github.ibm.com/solsa/kar.git/internal/runtime"
    }
  },
  "responses": {
    "callPath200Response": {
      "description": "The response returned by the invoked endpoint",
      "schema": {
        "type": "object"
      },
      "headers": {
        "body": {
          "description": "The response returned by the invoked endpoint"
        }
      }
    },
    "cancelReminder200Response": {
      "headers": {
        "Body": {
          "type": "integer",
          "format": "int64",
          "example": 3,
          "description": "The number of reminders that were actually cancelled"
        }
      }
    },
    "getReminder200Response": {
      "headers": {
        "Body": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reminder"
          },
          "example": "[{ Actor: { Type: 'Foo', ID: '22' }, id: 'ticker', path: '/echo', deadline: '2020-04-14T14:17:51.073Z', period: 5000000000, encodedData: '{\"msg\":\"hello\"}' }]",
          "description": "An array containing all matching reminders"
        }
      }
    },
    "response200": {
      "description": "A success message.",
      "headers": {
        "body": {
          "type": "string",
          "example": "OK",
          "description": "A success message"
        }
      }
    },
    "response500": {
      "description": "A message describing the error",
      "headers": {
        "body": {
          "type": "string",
          "example": "Internal Server Error",
          "description": "A message describing the error"
        }
      }
    },
    "response503": {
      "description": "A message describing the error",
      "headers": {
        "body": {
          "type": "string",
          "example": "Service Unavailable",
          "description": "A message describing the error"
        }
      }
    }
  }
}